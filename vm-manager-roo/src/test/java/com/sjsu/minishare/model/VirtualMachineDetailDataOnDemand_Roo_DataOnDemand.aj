// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.minishare.model;

import com.sjsu.minishare.model.CloudUser;
import com.sjsu.minishare.model.CloudUserDataOnDemand;
import com.sjsu.minishare.model.VirtualMachineDetail;
import java.lang.Float;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect VirtualMachineDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VirtualMachineDetailDataOnDemand: @Component;
    
    private Random VirtualMachineDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<VirtualMachineDetail> VirtualMachineDetailDataOnDemand.data;
    
    @Autowired
    private CloudUserDataOnDemand VirtualMachineDetailDataOnDemand.cloudUserDataOnDemand;
    
    public VirtualMachineDetail VirtualMachineDetailDataOnDemand.getNewTransientVirtualMachineDetail(int index) {
        VirtualMachineDetail obj = new VirtualMachineDetail();
        setCreditsUsed(obj, index);
        setLastLogin(obj, index);
        setLastLogout(obj, index);
        setMachineId(obj, index);
        setMachineName(obj, index);
        setMachineStatus(obj, index);
        setMemory(obj, index);
        setNumberCPUs(obj, index);
        setOperatingSystem(obj, index);
        setTotalCost(obj, index);
        setUsageInMinutes(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void VirtualMachineDetailDataOnDemand.setCreditsUsed(VirtualMachineDetail obj, int index) {
        Integer creditsUsed = new Integer(index);
        obj.setCreditsUsed(creditsUsed);
    }
    
    public void VirtualMachineDetailDataOnDemand.setLastLogin(VirtualMachineDetail obj, int index) {
        Date lastLogin = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastLogin(lastLogin);
    }
    
    public void VirtualMachineDetailDataOnDemand.setLastLogout(VirtualMachineDetail obj, int index) {
        Date lastLogout = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastLogout(lastLogout);
    }
    
    public void VirtualMachineDetailDataOnDemand.setMachineId(VirtualMachineDetail obj, int index) {
        Integer machineId = new Integer(index);
        obj.setMachineId(machineId);
    }
    
    public void VirtualMachineDetailDataOnDemand.setMachineName(VirtualMachineDetail obj, int index) {
        String machineName = "machineName_" + index;
        if (machineName.length() > 256) {
            machineName = machineName.substring(0, 256);
        }
        obj.setMachineName(machineName);
    }
    
    public void VirtualMachineDetailDataOnDemand.setMachineStatus(VirtualMachineDetail obj, int index) {
        String machineStatus = "machineStatus_" + index;
        if (machineStatus.length() > 36) {
            machineStatus = machineStatus.substring(0, 36);
        }
        obj.setMachineStatus(machineStatus);
    }
    
    public void VirtualMachineDetailDataOnDemand.setMemory(VirtualMachineDetail obj, int index) {
        String memory = "memory_" + index;
        if (memory.length() > 36) {
            memory = memory.substring(0, 36);
        }
        obj.setMemory(memory);
    }
    
    public void VirtualMachineDetailDataOnDemand.setNumberCPUs(VirtualMachineDetail obj, int index) {
        Integer numberCPUs = new Integer(index);
        obj.setNumberCPUs(numberCPUs);
    }
    
    public void VirtualMachineDetailDataOnDemand.setOperatingSystem(VirtualMachineDetail obj, int index) {
        String operatingSystem = "operatingSystem_" + index;
        if (operatingSystem.length() > 100) {
            operatingSystem = operatingSystem.substring(0, 100);
        }
        obj.setOperatingSystem(operatingSystem);
    }
    
    public void VirtualMachineDetailDataOnDemand.setTotalCost(VirtualMachineDetail obj, int index) {
        Float totalCost = new Integer(index).floatValue();
        obj.setTotalCost(totalCost);
    }
    
    public void VirtualMachineDetailDataOnDemand.setUsageInMinutes(VirtualMachineDetail obj, int index) {
        Float usageInMinutes = new Integer(index).floatValue();
        obj.setUsageInMinutes(usageInMinutes);
    }
    
    public void VirtualMachineDetailDataOnDemand.setUserId(VirtualMachineDetail obj, int index) {
        CloudUser userId = cloudUserDataOnDemand.getRandomCloudUser();
        obj.setUserId(userId);
    }
    
    public VirtualMachineDetail VirtualMachineDetailDataOnDemand.getSpecificVirtualMachineDetail(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        VirtualMachineDetail obj = data.get(index);
        return VirtualMachineDetail.findVirtualMachineDetail(obj.getId());
    }
    
    public VirtualMachineDetail VirtualMachineDetailDataOnDemand.getRandomVirtualMachineDetail() {
        init();
        VirtualMachineDetail obj = data.get(rnd.nextInt(data.size()));
        return VirtualMachineDetail.findVirtualMachineDetail(obj.getId());
    }
    
    public boolean VirtualMachineDetailDataOnDemand.modifyVirtualMachineDetail(VirtualMachineDetail obj) {
        return false;
    }
    
    public void VirtualMachineDetailDataOnDemand.init() {
        data = VirtualMachineDetail.findVirtualMachineDetailEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'VirtualMachineDetail' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sjsu.minishare.model.VirtualMachineDetail>();
        for (int i = 0; i < 10; i++) {
            VirtualMachineDetail obj = getNewTransientVirtualMachineDetail(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
