// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.minishare.model;

import com.sjsu.minishare.model.CloudUser;
import com.sjsu.minishare.model.CloudUserDataOnDemand;
import com.sjsu.minishare.model.UserCredit;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserCreditDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserCreditDataOnDemand: @Component;
    
    private Random UserCreditDataOnDemand.rnd = new SecureRandom();
    
    private List<UserCredit> UserCreditDataOnDemand.data;
    
    @Autowired
    private CloudUserDataOnDemand UserCreditDataOnDemand.cloudUserDataOnDemand;
    
    public UserCredit UserCreditDataOnDemand.getNewTransientUserCredit(int index) {
        UserCredit obj = new UserCredit();
        setAmount(obj, index);
        setCloudUser(obj, index);
        setPaymentTransaction(obj, index);
        setTotalCredits(obj, index);
        setTotalCreditsUsed(obj, index);
        return obj;
    }
    
    public void UserCreditDataOnDemand.setAmount(UserCredit obj, int index) {
        Integer amount = new Integer(index);
        obj.setAmount(amount);
    }
    
    public void UserCreditDataOnDemand.setCloudUser(UserCredit obj, int index) {
        CloudUser cloudUser = cloudUserDataOnDemand.getRandomCloudUser();
        obj.setCloudUser(cloudUser);
    }
    
    public void UserCreditDataOnDemand.setPaymentTransaction(UserCredit obj, int index) {
        String paymentTransaction = "paymentTransaction_" + index;
        obj.setPaymentTransaction(paymentTransaction);
    }
    
    public void UserCreditDataOnDemand.setTotalCredits(UserCredit obj, int index) {
        Integer totalCredits = new Integer(index);
        obj.setTotalCredits(totalCredits);
    }
    
    public void UserCreditDataOnDemand.setTotalCreditsUsed(UserCredit obj, int index) {
        Integer totalCreditsUsed = new Integer(index);
        obj.setTotalCreditsUsed(totalCreditsUsed);
    }
    
    public UserCredit UserCreditDataOnDemand.getSpecificUserCredit(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        UserCredit obj = data.get(index);
        return UserCredit.findUserCredit(obj.getCreditId());
    }
    
    public UserCredit UserCreditDataOnDemand.getRandomUserCredit() {
        init();
        UserCredit obj = data.get(rnd.nextInt(data.size()));
        return UserCredit.findUserCredit(obj.getCreditId());
    }
    
    public boolean UserCreditDataOnDemand.modifyUserCredit(UserCredit obj) {
        return false;
    }
    
    public void UserCreditDataOnDemand.init() {
        data = UserCredit.findUserCreditEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'UserCredit' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.sjsu.minishare.model.UserCredit>();
        for (int i = 0; i < 10; i++) {
            UserCredit obj = getNewTransientUserCredit(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
