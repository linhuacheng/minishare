// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sjsu.minishare.model;

import com.sjsu.minishare.model.UserCredit;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserCredit_Roo_Entity {
    
    declare @type: UserCredit: @Entity;
    
    @PersistenceContext
    transient EntityManager UserCredit.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer UserCredit.version;
    
    public Integer UserCredit.getVersion() {
        return this.version;
    }
    
    public void UserCredit.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void UserCredit.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void UserCredit.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserCredit attached = UserCredit.findUserCredit(this.creditId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void UserCredit.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void UserCredit.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public UserCredit UserCredit.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        UserCredit merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager UserCredit.entityManager() {
        EntityManager em = new UserCredit().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long UserCredit.countUserCredits() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserCredit o", Long.class).getSingleResult();
    }
    
    public static List<UserCredit> UserCredit.findAllUserCredits() {
        return entityManager().createQuery("SELECT o FROM UserCredit o", UserCredit.class).getResultList();
    }
    
    public static UserCredit UserCredit.findUserCredit(Integer creditId) {
        if (creditId == null) return null;
        return entityManager().find(UserCredit.class, creditId);
    }
    
    public static List<UserCredit> UserCredit.findUserCreditEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserCredit o", UserCredit.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
